#!/bin/bash

# Get command used to launch script
callPath="$0"

# Get the directory path given to the script
workDir="$(dirname $callPath)"

# Check if it was launched locally
if [[ "$workDir" == "." ]]
then
	# Use `pwd` instead
	workDir="$(pwd)"
fi 

source "$workDir/parseArgs.sh"

addParameter "a" "add" "argAdd" "7" "1" "Add a new directory or file to be linked to the dotfiles folder."
addParameter "i" "import" "argImport" "7" "2" "Import an exsiting directory or file and link it to the dotfiles folder."
addParameter "u" "use" "argUse" "3" "1" "Use a directory or file already in the dotfiles folder."
addParameter "v" "verbose" "verbose" "0" "0" "Set verbose output"
addParameter "f" "force" "force" "0" "0" "Force linking with existing files"
addParameter "D" "debug" "debug" "0" "0" "Start as debug. Makes no file system changes."
addParameter "n" "name" "configName" "0" "1" "The name of the configuration"
addParameter "s" "sync" "gitSync" "2" "0" "Check for local file changes and sync them to the git repository"

configRoot="$workDir/root/"
configInfo="$workDir/info/"

use=0
function vout()
{
	# Is verbose mode enabled?
	if [[ "$verbose" == "1" ]]
	then
		# It is print message
		echo -e "$1"
	fi
}

function d()
{
	# Is debug mode enabled?
	if [[ "$debug" == "0" ]]
	then
		# Run command
		eval "$1"
	else
		echo "Debug skip: $1"
	fi
}

function argAdd() 
{
	# Filter out a `\` character
	inpath="$(echo $1 | sed 's/\/$//g')"

	# Call new item function
	newItem "$inpath" "$inpath"
}
	
function argImport() 
{
	# Filter out a `\` character
	inpath="$(echo $1 | sed 's/\/$//g')"

	# Call new item function
	newItem "$inpath" "$2"
}

function newItem()
{
	# Check for a name to use
	if [[ "$configName" == "0" ]]
	then
		echo "Please use \"-n\" to set a name for the new configuration"
		exit 1
	fi

		# Get item's current location
	cpath=$1

	# Get item's use location
	upath=$2

	# Get item's link location
	lpath="$configRoot${upath:1}"

	# Test if the file/dir will need to be moved or can be copied
	move=1
	if [[ "$cpath" != "$upath" ]]
	then
		move=0
	fi


	# Make the link
	createLink

	# Create record in config file
	d "mkdir -p $configInfo"
	d "touch '$configInfo$configName.lst'"
	if ! grep '$upath' "$configInfo$configName.lst"
	then
		d "echo '$upath' >> '$configInfo$configName.lst'"
	fi
	
	# Add new files to git
	d "git --git-path='$workDir' add '$configInfo$configName.lst'"
	d "git --git-path='$workDir' add '$lpath'"

	# Commit new files
	d "git --git-path='$workDir' commit -m 'New config added: $configName'"

	# Sync changes
	gitSync
}

function createLink()
{
	# vout collected info
	vout "Setting up $configName:
Use file(s) from:\t$cpath
Location of use:\t$upath
New location:\t\t$lpath
Move or copy:\t\t$move"

	testPaths
	result=$?

	# Verify paths
	if [[ "$result" != "0" && "$force" != "1" && "$use" != "1" ]]
	then 
		exit 1
	elif [[ "$result" != "2" && "$force" == "1" ]]
	then
		d "rm -rf '$upath'"
	elif [[ "$result" != "3" && "$force" == "1" ]]
	then
		d "unlink '$upath'"
	fi
	
	# Create link destination directory
	d "mkdir -p $(dirname $lpath)"
	
	if [[ "$use" == 0 ]]
	then
		if [[ "$move" == "1" ]]
		then
			moveSetup
		else
			copySetup
		fi
	fi

	# Link to use location
	d "ln -s $lpath $upath"
}

function copySetup()
{
	# Copy the file/dir to the link root
	d "cp -r $cpath $lpath"
}

function moveSetup()
{
	# Copy the file/dir to the link root
	d "mv $cpath $lpath"
}

function testPaths()
{
	allGood=0

	vout "Testing paths"

	# Test current path exists
	if ! [[ -e "$cpath" ]] 
	then
		allGood=1
		echo "Cannot find existing file/dir : $cpath"
	fi

	# Test current path is not a link
	if [[ -L "$upath" ]] 
	then
		allGood=2
		echo "Link already exists : $cpath"
	fi

	# Test new path is clear
	if [[ -e "$lpath" ]] 
	then
		allGood=3
		echo "A file/dir already exists at: $lpath"
	fi
	
	return $allGood
}

function gitSync()
{
	# Get any new changes
	d "git --git-path='$workDir' pull origin master"

	# Get folder listings for all configs and check them
	for file in $configInfo*
	do
		# Get list of directories from file
		readarray -t cfglines < $file
		for dir in "${cfglines[@]}"
		do
			# Stage any new files to commit
			d "git --git-path='$workDir'  add $configRoot${dir:1}"
		done
		
		# Get config name
		name="$(basename $file)"
		name="$(echo $name | sed 's/.lst//g')"

		# Commit changes for those folders
		d "git --git-path='$workDir' commit -m 'Adding changes to configuration for: $name'"
	done

	# Send any new changes to server
	d "git --git-path='$workDir' push origin master"
}


function argUse()
{
	use=1
	upaths=()
	# If no argument was passed then use all
	if [[ -z "$1" ]]
	then
		# Get folder listings for all configs and check them
		for file in $configInfo*
		do
			# Get list of directories from file
			readarray -t cfglines < $file
			for dir in "${cfglines[@]}"
			do
				# Store upaths
				upaths+=("$dir")
			done
		done
	
	else
		# Get list of directories from file
		readarray -t cfglines < "$configInfo$1.lst"
		for dir in "${cfglines[@]}"
		do
			# Store upaths
			upaths+=("$dir")
		done
	fi
	
	for upath in "${upaths[@]}"
	do
		# Get item's current location
		cpath=$upath

		# Get item's link location
		lpath="$configRoot${upath:1}"

		# Get parent dir for upath
		#upath="$(dirname '$upath')"

		createLink
	done
}

argParse "$@"

